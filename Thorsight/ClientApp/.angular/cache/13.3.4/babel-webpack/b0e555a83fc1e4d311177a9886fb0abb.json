{"ast":null,"code":"import _asyncToGenerator from \"G:\\\\Farsight\\\\Thorsight\\\\Thorsight\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { catchError, map, of, timeout } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class QueryService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.apiUrl = \"http://localhost:4565/Api/\";\n  }\n\n  getLiquidityActions(address) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var result = yield _this.httpClient.get(_this.apiUrl + \"LiquidityActions/\" + address).pipe(timeout(2000), map(response => response), catchError(error => of(null))).toPromise();\n\n      if (result === undefined) {\n        return null;\n      }\n\n      return result;\n    })();\n  }\n\n  getOpenLiquidityPositions(address) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var result = yield _this2.httpClient.get(_this2.apiUrl + \"LiquidityActions/\" + address).pipe(timeout(2000), map(response => response), catchError(error => of(null))).toPromise();\n\n      if (result === undefined) {\n        return null;\n      }\n\n      return result;\n    })();\n  }\n\n}\n\nQueryService.ɵfac = function QueryService_Factory(t) {\n  return new (t || QueryService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nQueryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: QueryService,\n  factory: QueryService.ɵfac\n});","map":{"version":3,"sources":["G:/Farsight/Thorsight/Thorsight/ClientApp/src/app/core/services/queryservice.ts"],"names":["catchError","map","of","timeout","i0","i1","QueryService","constructor","httpClient","apiUrl","getLiquidityActions","address","result","get","pipe","response","error","toPromise","undefined","getOpenLiquidityPositions","ɵfac","QueryService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,EAA1B,EAA8BC,OAA9B,QAA6C,MAA7C;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,YAAN,CAAmB;AACtBC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,SAAKA,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAc,4BAAd;AACH;;AACKC,EAAAA,mBAAmB,CAACC,OAAD,EAAU;AAAA;;AAAA;AAC/B,UAAIC,MAAM,SAAS,KAAI,CAACJ,UAAL,CAAgBK,GAAhB,CAAoB,KAAI,CAACJ,MAAL,GAAc,mBAAd,GAAoCE,OAAxD,EACdG,IADc,CACTX,OAAO,CAAC,IAAD,CADE,EACMF,GAAG,CAAEc,QAAD,IAAcA,QAAf,CADT,EACmCf,UAAU,CAAEgB,KAAD,IAAWd,EAAE,CAAC,IAAD,CAAd,CAD7C,EAEde,SAFc,EAAnB;;AAGA,UAAIL,MAAM,KAAKM,SAAf,EAA0B;AACtB,eAAO,IAAP;AACH;;AACD,aAAON,MAAP;AAP+B;AAQlC;;AACKO,EAAAA,yBAAyB,CAACR,OAAD,EAAU;AAAA;;AAAA;AACrC,UAAIC,MAAM,SAAS,MAAI,CAACJ,UAAL,CAAgBK,GAAhB,CAAoB,MAAI,CAACJ,MAAL,GAAc,mBAAd,GAAoCE,OAAxD,EACdG,IADc,CACTX,OAAO,CAAC,IAAD,CADE,EACMF,GAAG,CAAEc,QAAD,IAAcA,QAAf,CADT,EACmCf,UAAU,CAAEgB,KAAD,IAAWd,EAAE,CAAC,IAAD,CAAd,CAD7C,EAEde,SAFc,EAAnB;;AAGA,UAAIL,MAAM,KAAKM,SAAf,EAA0B;AACtB,eAAO,IAAP;AACH;;AACD,aAAON,MAAP;AAPqC;AAQxC;;AAtBqB;;AAwB1BN,YAAY,CAACc,IAAb,GAAoB,SAASC,oBAAT,CAA8BC,CAA9B,EAAiC;AAAE,SAAO,KAAKA,CAAC,IAAIhB,YAAV,EAAwBF,EAAE,CAACmB,QAAH,CAAYlB,EAAE,CAACmB,UAAf,CAAxB,CAAP;AAA6D,CAApH;;AACAlB,YAAY,CAACmB,KAAb,GAAqB,aAAcrB,EAAE,CAACsB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAErB,YAAT;AAAuBsB,EAAAA,OAAO,EAAEtB,YAAY,CAACc;AAA7C,CAAtB,CAAnC","sourcesContent":["import { catchError, map, of, timeout } from \"rxjs\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class QueryService {\r\n    constructor(httpClient) {\r\n        this.httpClient = httpClient;\r\n        this.apiUrl = \"http://localhost:4565/Api/\";\r\n    }\r\n    async getLiquidityActions(address) {\r\n        var result = await this.httpClient.get(this.apiUrl + \"LiquidityActions/\" + address)\r\n            .pipe(timeout(2000), map((response) => response), catchError((error) => of(null)))\r\n            .toPromise();\r\n        if (result === undefined) {\r\n            return null;\r\n        }\r\n        return result;\r\n    }\r\n    async getOpenLiquidityPositions(address) {\r\n        var result = await this.httpClient.get(this.apiUrl + \"LiquidityActions/\" + address)\r\n            .pipe(timeout(2000), map((response) => response), catchError((error) => of(null)))\r\n            .toPromise();\r\n        if (result === undefined) {\r\n            return null;\r\n        }\r\n        return result;\r\n    }\r\n}\r\nQueryService.ɵfac = function QueryService_Factory(t) { return new (t || QueryService)(i0.ɵɵinject(i1.HttpClient)); };\r\nQueryService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: QueryService, factory: QueryService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}