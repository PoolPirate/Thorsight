{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _QueryResultSetBuilder_instances, _QueryResultSetBuilder_computeRunStats, _QueryResultSetBuilder_createRecords;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueryResultSetBuilder = void 0;\n\nclass QueryResultSetBuilder {\n  constructor(data) {\n    _QueryResultSetBuilder_instances.add(this);\n\n    this.error = data.error;\n    const queryResultJson = data.queryResultJson;\n\n    if (!queryResultJson) {\n      this.queryId = null;\n      this.status = null;\n      this.columns = null;\n      this.columnTypes = null;\n      this.rows = null;\n      this.runStats = null;\n      this.records = null;\n      return;\n    }\n\n    this.queryId = queryResultJson.queryId;\n    this.status = queryResultJson.status;\n    this.columns = queryResultJson.columnLabels;\n    this.columnTypes = queryResultJson.columnTypes;\n    this.rows = queryResultJson.results;\n    this.runStats = __classPrivateFieldGet(this, _QueryResultSetBuilder_instances, \"m\", _QueryResultSetBuilder_computeRunStats).call(this, queryResultJson);\n    this.records = __classPrivateFieldGet(this, _QueryResultSetBuilder_instances, \"m\", _QueryResultSetBuilder_createRecords).call(this, queryResultJson);\n  }\n\n}\n\nexports.QueryResultSetBuilder = QueryResultSetBuilder;\n_QueryResultSetBuilder_instances = new WeakSet(), _QueryResultSetBuilder_computeRunStats = function _QueryResultSetBuilder_computeRunStats(queryResultJson) {\n  if (!queryResultJson) {\n    return null;\n  }\n\n  let startedAt = new Date(queryResultJson.startedAt);\n  let endedAt = new Date(queryResultJson.endedAt);\n  let elapsedSeconds = (endedAt.getTime() - startedAt.getTime()) / 1000;\n  return {\n    startedAt,\n    endedAt,\n    elapsedSeconds,\n    recordCount: queryResultJson.results.length\n  };\n}, _QueryResultSetBuilder_createRecords = function _QueryResultSetBuilder_createRecords(queryResultJson) {\n  if (!queryResultJson) {\n    return null;\n  }\n\n  let columnLabels = queryResultJson.columnLabels;\n\n  if (!columnLabels) {\n    return null;\n  }\n\n  return queryResultJson.results.map(result => {\n    let record = {};\n    result.forEach((value, index) => {\n      record[columnLabels[index].toLowerCase()] = value;\n    });\n    return record;\n  });\n}; //# sourceMappingURL=query-result-set-builder.js.map","map":null,"metadata":{},"sourceType":"script"}